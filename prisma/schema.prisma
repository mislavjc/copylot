generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "sqlite"
  url          = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  name String

  members  User[]
  projects Project[]
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  name           String
  url            String
  organizationId String

  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  promptLibraries PromptLibrary[]
  toneDescription ToneDescription?
  experiments     Experiment[]

  @@index([organizationId])
}

model PromptLibrary {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  name      String
  value     String
  projectId String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model ToneDescription {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  tone                     String
  formalityLevel           String
  vocabularyPreferences    String
  targetAudience           String
  culturalNuances          String
  sentenceLengthPreference String
  brandValues              String
  desiredCTA               String
  USPs                     String
  projectId                String @unique

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Experiment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String
  projectId   String

  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  variations Variation[]
  Message    Message[]

  @@index([projectId])
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role         String
  content      String
  experimentId String

  Experiment Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

  @@index([experimentId])
}

model Variation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  value        String
  experimentId String

  experiment Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

  @@index([experimentId])
}
